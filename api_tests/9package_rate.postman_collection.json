{
	"info": {
		"_postman_id": "47a398b6-f420-47ce-8692-4615179681a7",
		"name": "/package/{id}/rate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39859783",
		"_collection_link": "https://ece461-p2.postman.co/workspace/ece461-p2~f9dd22be-38e2-46cd-8204-8d5c3d3b6a55/collection/39859783-47a398b6-f420-47ce-8692-4615179681a7?action=share&source=collection_link&creator=39859783"
	},
	"item": [
		{
			"name": "rate_valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Validate status code is 200",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const requiredFields = [",
							"    \"RampUp\", \"Correctness\", \"BusFactor\", \"ResponsiveMaintainer\", ",
							"    \"LicenseScore\", \"GoodPinningPractice\", \"PullRequest\", \"NetScore\",",
							"    \"RampUpLatency\", \"CorrectnessLatency\", \"BusFactorLatency\", ",
							"    \"ResponsiveMaintainerLatency\", \"LicenseScoreLatency\", ",
							"    \"GoodPinningPracticeLatency\", \"PullRequestLatency\", \"NetScoreLatency\"",
							"];",
							"",
							"// Test 2: Validate response contains all required fields",
							"pm.test(\"Response contains all required fields\", function () {",
							"    const response = pm.response.json();",
							"",
							"    requiredFields.forEach(field => {",
							"        pm.expect(response).to.have.property(field);",
							"    });",
							"});",
							"",
							"// Test 3: Validate all required fields are numbers",
							"pm.test(\"All required fields are valid numbers\", function () {",
							"    const response = pm.response.json();",
							"",
							"    requiredFields.forEach(field => {",
							"        pm.expect(response[field]).to.be.a(\"number\");",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/package/{{package_id}}/rate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"{{package_id}}",
						"rate"
					]
				}
			},
			"response": []
		},
		{
			"name": "rate_invalid_400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 400",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response to invalid /package/{id}/rate GET\", function () {",
							"    pm.expect(pm.response).to.equal('There is missing field(s) in the PackageID or it is formed improperly, or is invalid.');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/package/{{AUTH_TOKEN}}/rate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"{{AUTH_TOKEN}}",
						"rate"
					]
				}
			},
			"response": []
		},
		{
			"name": "rate_invalid_403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 403",
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response to invalid /package/{id}/rate GET\", function () {",
							"    pm.expect(pm.response).to.equal('Authentication failed due to invalid or missing AuthenticationToken.');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/package/{{package_id}}/rate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"{{package_id}}",
						"rate"
					]
				}
			},
			"response": []
		},
		{
			"name": "rate_invalid_404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 404",
							"pm.test(\"Response Code should be 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response to invalid /package/{id}/rate GET\", function () {",
							"    pm.expect(pm.response).to.equal('Package does not exist.');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/package/123/rate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"123",
						"rate"
					]
				}
			},
			"response": []
		},
		{
			"name": "rate_invalid_500",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 500",
							"pm.test(\"Response Code should be 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"pm.test(\"Response to invalid /package/{id}/rate GET\", function () {",
							"    pm.expect(pm.response).to.equal('The package rating system choked on at least one of the metrics.');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/package/{{package_id}}/rate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"{{package_id}}",
						"rate"
					]
				}
			},
			"response": []
		}
	]
}