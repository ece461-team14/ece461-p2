{
	"info": {
		"_postman_id": "9ce421b9-4138-43f7-96cf-5c4329ae1eed",
		"name": "/package",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39859783",
		"_collection_link": "https://ece461-p2.postman.co/workspace/ece461-p2~f9dd22be-38e2-46cd-8204-8d5c3d3b6a55/collection/39859783-9ce421b9-4138-43f7-96cf-5c4329ae1eed?action=share&source=collection_link&creator=39859783"
	},
	"item": [
		{
			"name": "post_package_valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 201",
							"pm.test(\"Response Code should be 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Validate the Content-Type header",
							"pm.test(\"Content-Type should be JSON\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"// Validate response metadata structure",
							"pm.test(\"Response metadata should have Name, Version, and ID\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.metadata).to.have.property(\"Name\");",
							"    pm.expect(jsonData.metadata).to.have.property(\"Version\");",
							"    pm.expect(jsonData.metadata).to.have.property(\"ID\");",
							"    pm.environment.set(\"package_id\", jsonData.ID);",
							"});",
							"",
							"// Ensure either Content or URL is present",
							"pm.test(\"Response data should include Content or URL\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.satisfy(data => ",
							"        data.hasOwnProperty(\"Content\") || data.hasOwnProperty(\"URL\")",
							"    );",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Name\": \"test_package\",\n  \"Version\": \"1.0.0\",\n  \"Content\": \"UEsDBAoAAAAAACAfUFkAAAAAAAAAAAAAAAASAAkAdW5kZXJzY29yZS1t.........fQFQAoADBkODIwZWY3MjkyY2RlYzI4ZGQ4YjVkNTY1OTIxYjgxMDBjYTMzOTc=\\n\",\n  \"JSProgram\": \"if (process.argv.length === 7) {\\nconsole.log('Success')\\nprocess.exit(0)\\n} else {\\nconsole.log('Failed')\\nprocess.exit(1)\\n}\\n\",\n  \"debloat\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/package/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "post_package_invalid_400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 400",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response to invalid /package/ POST\", function () {",
							"    pm.expect(pm.response).to.equal.toString('There is missing field(s) in the PackageData or it is formed improperly (e.g. Content and URL ar both set)');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Version\": \"1.0.0\",\n  \"Content\": \"UEsDBAoAAAAAACAfUFkAAAAAAAAAAAAAAAASAAkAdW5kZXJzY29yZS1t.........fQFQAoADBkODIwZWY3MjkyY2RlYzI4ZGQ4YjVkNTY1OTIxYjgxMDBjYTMzOTc=\\n\",\n  \"JSProgram\": \"if (process.argv.length === 7) {\\nconsole.log('Success')\\nprocess.exit(0)\\n} else {\\nconsole.log('Failed')\\nprocess.exit(1)\\n}\\n\",\n  \"debloat\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/package",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "post_package_invalid_403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 403",
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response to invalid /package/ POST\", function () {",
							"    pm.expect(pm.response).to.equal.toString('Authentication failed due to invalid or missing AuthenticationToken.' );",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/package",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "post_package_invalid_409",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 409",
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response to invalid /package/ POST\", function () {",
							"    pm.expect(pm.response).to.equal.toString('Package exists already.' );",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"Name\": \"test_package\",\n  \"Version\": \"1.0.0\",\n  \"Content\": \"UEsDBAoAAAAAACAfUFkAAAAAAAAAAAAAAAASAAkAdW5kZXJzY29yZS1t.........fQFQAoADBkODIwZWY3MjkyY2RlYzI4ZGQ4YjVkNTY1OTIxYjgxMDBjYTMzOTc=\\n\",\n  \"JSProgram\": \"if (process.argv.length === 7) {\\nconsole.log('Success')\\nprocess.exit(0)\\n} else {\\nconsole.log('Failed')\\nprocess.exit(1)\\n}\\n\",\n  \"debloat\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/package",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package"
					]
				}
			},
			"response": []
		},
		{
			"name": "post_package_invalid_424",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 424",
							"pm.test(\"Status code is 424\", function () {",
							"    pm.response.to.have.status(424);",
							"});",
							"",
							"pm.test(\"Response to invalid /package/ POST\", function () {",
							"    pm.expect(pm.response).to.equal.toString('Package is not uploaded due to the disqualified rating.');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/package",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package"
					]
				}
			},
			"response": []
		}
	]
}