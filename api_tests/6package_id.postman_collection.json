{
	"info": {
		"_postman_id": "8b08f238-3c68-4abd-8549-1ff5d260759a",
		"name": "/package/{id}",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39859783",
		"_collection_link": "https://ece461-p2.postman.co/workspace/ece461-p2~f9dd22be-38e2-46cd-8204-8d5c3d3b6a55/collection/39859783-8b08f238-3c68-4abd-8549-1ff5d260759a?action=share&source=collection_link&creator=39859783"
	},
	"item": [
		{
			"name": "get_id_valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200",
							"pm.test(\"Response Code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validate the Content-Type header",
							"pm.test(\"Content-Type should be JSON\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"// Validate response structure",
							"pm.test(\"Response should include metadata and data\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"metadata\");",
							"    pm.expect(jsonData).to.have.property(\"data\");",
							"    pm.expect(jsonData.metadata).to.have.property(\"Name\");",
							"    pm.expect(jsonData.metadata).to.have.property(\"Version\");",
							"    pm.expect(jsonData.metadata).to.have.property(\"ID\");",
							"    pm.expect(jsonData.data).to.satisfy(data => ",
							"        data.hasOwnProperty(\"Content\")",
							"    );",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/package/{{package_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"{{package_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "post_id_invalid_400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 400",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// NOTE: May be a quotation error here, API spec unclear",
							"pm.test(\"Response to invalid package/{id} GET\", function () {",
							"    pm.expect(pm.response).to.equal.toString('There is missing field(s) in the PackageID or it is formed improperly, or is invalid.');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X_Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/package/{{package_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"{{package_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "post_id_invalid_403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 403",
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response to invalid package/{id} GET\", function () {",
							"    pm.expect(pm.response).to.equal.toString('Authentication failed due to invalid or missing AuthenticationToken.' );",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/package/123",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "post_id_invalid_404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 404",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response to invalid package/{id} GET\", function () {",
							"    pm.expect(pm.response).to.equal.toString('Package does not exist.');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				]
			},
			"response": []
		},
		{
			"name": "post_id_valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200",
							"pm.test(\"Response Code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response to valid package/{id} POST\", function () {",
							"    pm.expect(pm.response).to.equal.toString('Version is updated.');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"metadata\": {\n        \"Name\": \"watch.js\",\n        \"Version\": \"1.2.4\",\n        \"ID\": \"387e91e1efac8a0bfc6daa49284f0cb2cbe033807700b1bd7fb37b6a7896117a\"\n    },\n    \"data\": {\n    \"Name\": \"watch.js\",\n    \"Content\": \"\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/package/{{package_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"{{package_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "post_id_invalid_400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 400",
							"pm.test(\"Response Code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response to invalid package/{id} POST\", function () {",
							"    pm.expect(pm.response).to.equal.toString('There is missing field(s) in the PackageID or it is formed improperly, or is invalid.');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X_Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/package/123",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "post_id_invalid_403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 403",
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response to invalid package/{id} POST\", function () {",
							"    pm.expect(pm.response).to.equal.toString('Authentication failed due to invalid or missing AuthenticationToken.' );",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/package/123",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "post_id_invalid_404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 404",
							"pm.test(\"Response Code should be 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response to invalid package/{id} POST\", function () {",
							"    pm.expect(pm.response).to.equal.toString('Package does not exist.');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X_Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/package/123",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Authorization",
						"value": "{{AUTH_TOKEN}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"metadata\": {\n    \"Name\": \"easy-math-module\",\n    \"Version\": \"1.2.0\",\n    \"ID\": \"fe7bf793c45abaf799b376d85690bd91c5073b19bdb8465f48856ddec986a3d5\"\n  },\n  \"data\": {\n    \"URL\": \"https://github.com/Gninoskcaj/easy-math-module\",\n    \"JSProgram\": \"if (process.argv.length === 7) {\\nconsole.log('Success')\\nprocess.exit(0)\\n} else {\\nconsole.log('Failed')\\nprocess.exit(1)\\n}\",\n    \"debloat\": false\n  }\n}   ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/package/{{package_id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"package",
						"{{package_id}}"
					]
				}
			},
			"response": []
		}
	]
}